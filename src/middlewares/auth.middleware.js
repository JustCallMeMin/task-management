const jwt = require("jsonwebtoken");
const User = require("../models/user.model");
const Role = require("../models/role.model");
const UserRole = require("../models/user_role.model");
const RolePermission = require("../models/role_permission.model");
const Permission = require("../models/permission.model");
require("dotenv").config();

const authenticate = async (req, res, next) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];

        if (!token) {
            return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p!" });
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üìå Token decoded:", decoded); // ‚úÖ Ki·ªÉm tra gi√° tr·ªã

        if (!decoded.userId) {
            return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
        }

        const user = await User.findOne({
            where: { userId: decoded.userId },
            include: [{ model: Role, as: "Roles" }]
        });

        if (!user) {
            return res.status(401).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!" });
        }

        // L·∫•y danh s√°ch t√™n vai tr√≤ t·ª´ user
        const roleNames = user.Roles.map(role => role.roleName);
        console.log("‚úÖ Vai tr√≤ c·ªßa User:", roleNames);

        req.user = {
            id: user.userId,
            roles: roleNames
        };

        console.log("üìå D·ªØ li·ªáu user g√°n v√†o req.user:", req.user); // ‚úÖ Ki·ªÉm tra gi√° tr·ªã
        next();
    } catch (error) {
        console.log("‚ùå L·ªói x√°c th·ª±c:", error);
        return res.status(403).json({ message: "Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }
};

const authorize = (permissions) => {
    return async (req, res, next) => {
        try {
            if (!req.user || !req.user.roles) {
                return res.status(403).json({ message: "Forbidden: B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });
            }

            // ‚úÖ T√¨m Role c·ªßa User v√† l·∫•y Permission t·ª´ Role
            const userRoles = await Role.findAll({
                where: { roleName: req.user.roles },
                include: [{ model: Permission, as: "Permissions" }]
            });

            // ‚úÖ Tr√≠ch xu·∫•t danh s√°ch quy·ªÅn t·ª´ Role
            const permissionNames = userRoles.flatMap(role => role.Permissions.map(perm => perm.permissionName));

            console.log("‚úÖ Danh s√°ch quy·ªÅn c·ªßa User:", permissionNames); // Debug log

            if (!permissions.some((perm) => permissionNames.includes(perm))) {
                return res.status(403).json({ message: "Forbidden: B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });
            }
            next();
        } catch (error) {
            console.log("‚ùå L·ªói ph√¢n quy·ªÅn:", error);
            return res.status(500).json({ message: "Internal server error" });
        }
    };
};
module.exports = { authenticate, authorize };
