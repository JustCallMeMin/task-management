const { checkSchema, validationResult } = require("express-validator");
const {
	TASK_PRIORITY,
	TASK_STATUS,
	PROJECT_STATUS,
} = require("../constants/enums");

// Middleware ki·ªÉm tra l·ªói validation
const validateRequest = (req, res, next) => {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		return res.status(400).json({ errors: errors.array() });
	}
	next();
};

// üîπ Validate ƒêƒÉng k√Ω t√†i kho·∫£n
const validateRegister = checkSchema({
	fullName: { notEmpty: { errorMessage: "H·ªç t√™n l√† b·∫Øt bu·ªôc." } },
	email: { isEmail: { errorMessage: "Email kh√¥ng h·ª£p l·ªá." } },
	phone: {
		matches: {
			options: [/^\d{10,11}$/],
			errorMessage: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.",
		},
	},
	password: {
		isLength: {
			options: { min: 8 },
			errorMessage: "M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±.",
		},
		matches: {
			options: [/(?=.*[A-Z])(?=.*\d)/],
			errorMessage: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë v√† 1 ch·ªØ in hoa.",
		},
	},
});

// üîπ Validate M·∫≠t kh·∫©u m·ªõi
const validatePassword = checkSchema({
	newPassword: {
		isLength: {
			options: { min: 8 },
			errorMessage: "M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 8 k√Ω t·ª±.",
		},
		matches: {
			options: [/(?=.*[A-Z])(?=.*\d)/],
			errorMessage: "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë v√† 1 ch·ªØ in hoa.",
		},
	},
});

// üîπ Validate t·∫°o nh√≥m
const validateCreateGroup = checkSchema({
	name: {
		notEmpty: { errorMessage: "T√™n nh√≥m l√† b·∫Øt bu·ªôc." },
		isString: { errorMessage: "T√™n nh√≥m kh√¥ng h·ª£p l·ªá." },
	},
	description: {
		optional: true,
		isString: { errorMessage: "M√¥ t·∫£ kh√¥ng h·ª£p l·ªá." },
	},
});

// üîπ Validate c·∫≠p nh·∫≠t nh√≥m
const validateUpdateGroup = checkSchema({
	name: {
		optional: true,
		isString: { errorMessage: "T√™n nh√≥m kh√¥ng h·ª£p l·ªá." },
	},
	description: {
		optional: true,
		isString: { errorMessage: "M√¥ t·∫£ kh√¥ng h·ª£p l·ªá." },
	},
});

// üîπ Validate t·∫°o Organization Project
const validateCreateProject = checkSchema({
	name: { notEmpty: { errorMessage: "T√™n d·ª± √°n l√† b·∫Øt bu·ªôc." } },
	description: {
		optional: true,
		isString: { errorMessage: "M√¥ t·∫£ kh√¥ng h·ª£p l·ªá." },
	},
	startDate: {
		optional: true,
		isISO8601: { errorMessage: "Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá." },
	},
	endDate: {
		optional: true,
		isISO8601: { errorMessage: "Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá." },
	},
	members: {
		optional: true,
		isArray: { errorMessage: "Danh s√°ch th√†nh vi√™n kh√¥ng h·ª£p l·ªá." },
	},
});

// üîπ Validate c·∫≠p nh·∫≠t Project
const validateUpdateProject = checkSchema({
	projectId: {
		in: ["params"],
		isMongoId: { errorMessage: "ID d·ª± √°n kh√¥ng h·ª£p l·ªá." },
	},
	name: {
		optional: true,
		isString: { errorMessage: "T√™n d·ª± √°n kh√¥ng h·ª£p l·ªá." },
	},
	description: {
		optional: true,
		isString: { errorMessage: "M√¥ t·∫£ kh√¥ng h·ª£p l·ªá." },
	},
	startDate: {
		optional: true,
		isISO8601: { errorMessage: "Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá." },
	},
	endDate: {
		optional: true,
		isISO8601: { errorMessage: "Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá." },
	},
	status: {
		optional: true,
		isIn: {
			options: [Object.values(PROJECT_STATUS)],
			errorMessage: "Tr·∫°ng th√°i d·ª± √°n kh√¥ng h·ª£p l·ªá.",
		},
	},
});

// üîπ Validate th√™m th√†nh vi√™n v√†o d·ª± √°n
const validateAddMembers = checkSchema({
	projectId: {
		in: ["params"],
		isMongoId: { errorMessage: "ID d·ª± √°n kh√¥ng h·ª£p l·ªá." },
	},
	members: {
		isArray: {
			options: { min: 1 },
			errorMessage: "Danh s√°ch th√†nh vi√™n kh√¥ng h·ª£p l·ªá.",
		},
	},
});

// üîπ Validate x√≥a th√†nh vi√™n kh·ªèi d·ª± √°n
const validateRemoveMembers = checkSchema({
	projectId: {
		in: ["params"],
		isMongoId: { errorMessage: "ID d·ª± √°n kh√¥ng h·ª£p l·ªá." },
	},
	userIds: {
		isArray: {
			options: { min: 1 },
			errorMessage: "Danh s√°ch userIds kh√¥ng h·ª£p l·ªá.",
		},
	},
});

// üîπ Validate x√≥a d·ª± √°n
const validateDeleteProjects = checkSchema({
	projectIds: {
		isArray: {
			options: { min: 1 },
			errorMessage: "Danh s√°ch projectIds kh√¥ng h·ª£p l·ªá.",
		},
	},
});

// üîπ Validate t·∫°o Task
const validateCreateTask = checkSchema({
	title: { notEmpty: { errorMessage: "Ti√™u ƒë·ªÅ Task l√† b·∫Øt bu·ªôc." } },
	description: {
		optional: true,
		isString: { errorMessage: "M√¥ t·∫£ kh√¥ng h·ª£p l·ªá." },
	},
	dueDate: {
		optional: true,
		isISO8601: { errorMessage: "Ng√†y h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá." },
		custom: {
			options: (value) => {
				const dueDate = new Date(value);
				const now = new Date();
				if (dueDate <= now) {
					throw new Error("Ng√†y h·∫øt h·∫°n ph·∫£i l√† m·ªôt ng√†y trong t∆∞∆°ng lai.");
				}
				return true;
			},
		},
	},
	priority: {
		optional: true,
		isIn: {
			options: [Object.values(TASK_PRIORITY)],
			errorMessage: "M·ª©c ƒë·ªô ∆∞u ti√™n kh√¥ng h·ª£p l·ªá.",
		},
	},
	projectId: {
		optional: true,
		isMongoId: { errorMessage: "ID d·ª± √°n kh√¥ng h·ª£p l·ªá." },
	},
	assignedUserId: {
		optional: true,
		isMongoId: { errorMessage: "ID ng∆∞·ªùi ƒë∆∞·ª£c giao kh√¥ng h·ª£p l·ªá." },
	},
});

// üîπ Validate c·∫≠p nh·∫≠t Task
const validateUpdateTask = checkSchema({
	taskId: {
		in: ["params"],
		isMongoId: { errorMessage: "ID Task kh√¥ng h·ª£p l·ªá." },
	},
	title: {
		optional: true,
		isString: { errorMessage: "Ti√™u ƒë·ªÅ kh√¥ng h·ª£p l·ªá." },
	},
	description: {
		optional: true,
		isString: { errorMessage: "M√¥ t·∫£ kh√¥ng h·ª£p l·ªá." },
	},
	dueDate: {
		optional: true,
		isISO8601: { errorMessage: "Ng√†y h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá." },
	},
	priority: {
		optional: true,
		isIn: {
			options: [Object.values(TASK_PRIORITY)],
			errorMessage: "M·ª©c ƒë·ªô ∆∞u ti√™n kh√¥ng h·ª£p l·ªá.",
		},
	},
	status: {
		optional: true,
		isIn: {
			options: [Object.values(TASK_STATUS)],
			errorMessage: "Tr·∫°ng th√°i Task kh√¥ng h·ª£p l·ªá.",
		},
	},
});

// üîπ Validate l·∫•y Task theo ID
const validateTaskId = checkSchema({
	taskId: {
		in: ["params"],
		isMongoId: { errorMessage: "ID Task kh√¥ng h·ª£p l·ªá." },
	},
});

// üîπ Validate l·∫•y danh s√°ch Task theo projectId
const validateTasksByProject = checkSchema({
	projectId: {
		in: ["params"],
		isMongoId: { errorMessage: "ID d·ª± √°n kh√¥ng h·ª£p l·ªá." },
	},
});

const validateLogin = (req, res, next) => {
	const { email, password } = req.body;

	if (!email) {
		return res.status(400).json({
			success: false,
			error: "Email l√† b·∫Øt bu·ªôc",
		});
	}

	if (!password) {
		return res.status(400).json({
			success: false,
			error: "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc",
		});
	}

	// Validate email format
	const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
	if (!emailRegex.test(email)) {
		return res.status(400).json({
			success: false,
			error: "Email kh√¥ng h·ª£p l·ªá",
		});
	}

	next();
};

module.exports = {
	validateRegister,
	validatePassword,
	validateCreateGroup,
	validateUpdateGroup,
	validateCreateProject,
	validateUpdateProject,
	validateAddMembers,
	validateRemoveMembers,
	validateDeleteProjects,
	validateCreateTask,
	validateUpdateTask,
	validateTaskId,
	validateTasksByProject,
	validateRequest,
	validateLogin,
};
