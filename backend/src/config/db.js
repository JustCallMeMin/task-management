const { ROLE } = require("../constants/enums");
const mongoose = require("mongoose");
const Role = require("../models/role.model");
const User = require("../models/user.model");
const UserRole = require("../models/user_role.model");
const Permission = require("../models/permission.model");
const RolePermission = require("../models/role_permission.model");
const bcrypt = require("bcryptjs");

require("dotenv").config();

// Danh s√°ch permissions
const permissions = [
	// ‚úÖ QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG (AUTHENTICATION)
	{ permissionName: "Manage Users" }, // Qu·∫£n l√Ω ng∆∞·ªùi d√πng (Admin)
	{ permissionName: "Reset Passwords" }, // Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng
	{ permissionName: "Update Profile" }, // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n

	// ‚úÖ QU·∫¢N L√ù D·ª∞ √ÅN (PROJECT MANAGEMENT)
	{ permissionName: "Create Project" }, // T·∫°o d·ª± √°n m·ªõi (Manager/Admin)
	{ permissionName: "Edit Project" }, // Ch·ªânh s·ª≠a th√¥ng tin d·ª± √°n
	{ permissionName: "Delete Project" }, // X√≥a d·ª± √°n (Admin)
	{ permissionName: "Manage Project Members" }, // Qu·∫£n l√Ω th√†nh vi√™n d·ª± √°n

	// ‚úÖ QU·∫¢N L√ù C√îNG VI·ªÜC (TASK MANAGEMENT)
	{ permissionName: "Create Personal Task" }, // T·∫°o task c√° nh√¢n (User)
	{ permissionName: "Create Project Task" }, // T·∫°o task trong d·ª± √°n (Manager/Admin)
	{ permissionName: "Assign Task" }, // Giao task cho th√†nh vi√™n
	{ permissionName: "Edit Task" }, // Ch·ªânh s·ª≠a task
	{ permissionName: "Delete Task" }, // X√≥a task (Admin/Manager)
	{ permissionName: "Change Task Status" }, // C·∫≠p nh·∫≠t tr·∫°ng th√°i task

	// ‚úÖ QU·∫¢N L√ù B√ÅO C√ÅO & TH·ªêNG K√ä
	{ permissionName: "View Reports" }, // Xem b√°o c√°o c√¥ng vi·ªác (Manager/Admin)
	{ permissionName: "Generate Reports" }, // T·∫°o b√°o c√°o (Admin)

	// ‚úÖ QU·∫¢N L√ù H·ªÜ TH·ªêNG
	{ permissionName: "Manage System Settings" }, // C·∫•u h√¨nh h·ªá th·ªëng (Admin)

	// ‚úÖ QU·∫¢N L√ù 2FA
	{ permissionName: "Manage 2FA" },
];

// Mapping quy·ªÅn cho t·ª´ng role
const rolePermissionsMap = {
	Admin: [
		"Manage Users",
		"Reset Passwords",
		"Update Profile",
		"Create Project",
		"Edit Project",
		"Delete Project",
		"Manage Project Members",
		"Create Personal Task",
		"Create Project Task",
		"Assign Task",
		"Edit Task",
		"Delete Task",
		"Change Task Status",
		"View Reports",
		"Generate Reports",
		"Manage System Settings",
		"Manage 2FA",
	],
	Manager: [
		"Update Profile",
		"Create Project",
		"Edit Project",
		"Manage Project Members",
		"Create Personal Task",
		"Create Project Task",
		"Assign Task",
		"Edit Task",
		"Delete Task",
		"Change Task Status",
		"View Reports",
	],
	User: ["Update Profile", "Create Personal Task", "Change Task Status"],
};

// H√†m g√°n permissions cho role
const assignPermissionsToRole = async (roleName, permissionNames) => {
	const role = await Role.findOne({ roleName });
	if (!role) {
		console.error(`‚ùå Kh√¥ng t√¨m th·∫•y role: ${roleName}`);
		return;
	}

	const permissions = await Permission.find({
		permissionName: { $in: permissionNames },
	});

	const rolePermissions = permissions.map((permission) => ({
		roleId: role._id,
		permissionId: permission._id,
	}));

	await RolePermission.insertMany(rolePermissions);
	console.log(`‚úÖ ƒê√£ g√°n ${permissions.length} quy·ªÅn cho role ${roleName}`);
};

// H√†m kh·ªüi t·∫°o permissions v√† role permissions
const initializePermissions = async () => {
	try {
		// Ki·ªÉm tra xem ƒë√£ c√≥ permissions ch∆∞a
		const existingPermissions = await Permission.find();
		if (existingPermissions.length === 0) {
			// T·∫°o permissions
			await Permission.insertMany(permissions);
			console.log("‚úÖ ƒê√£ t·∫°o permissions th√†nh c√¥ng!");
		}

		// Ki·ªÉm tra v√† t·∫°o role permissions
		const existingRolePermissions = await RolePermission.find();
		if (existingRolePermissions.length === 0) {
			// G√°n permissions cho t·ª´ng role
			for (const [roleName, permissionNames] of Object.entries(
				rolePermissionsMap
			)) {
				await assignPermissionsToRole(roleName, permissionNames);
			}
			console.log("‚úÖ ƒê√£ g√°n permissions cho c√°c role th√†nh c√¥ng!");
		}
	} catch (error) {
		console.error("‚ùå L·ªói khi kh·ªüi t·∫°o permissions:", error);
	}
};

const connectDB = async () => {
	try {
		const conn = await mongoose.connect(process.env.MONGO_URI);
		console.log(`üì¶ MongoDB ƒë√£ k·∫øt n·ªëi: ${conn.connection.host}`);

		// Kh·ªüi t·∫°o roles
		await initializeRoles();

		// Kh·ªüi t·∫°o permissions v√† role permissions
		await initializePermissions();

		// Kh·ªüi t·∫°o admin account
		await initializeAdmin();
	} catch (error) {
		console.error(`‚ùå L·ªói: ${error.message}`);
		process.exit(1);
	}
};

// üîπ Kh·ªüi t·∫°o Roles n·∫øu ch∆∞a c√≥
const initializeRoles = async () => {
	try {
		const existingRoles = await Role.find({}, "roleName");
		const existingRoleNames = existingRoles.map((r) => r.roleName);

		const rolesToInsert = Object.values(ROLE).filter(
			(role) => !existingRoleNames.includes(role)
		);

		if (rolesToInsert.length > 0) {
			await Role.insertMany(rolesToInsert.map((roleName) => ({ roleName })));
			console.log("‚úÖ ƒê√£ t·∫°o c√°c roles c√≤n thi·∫øu:", rolesToInsert);
		} else {
			console.log("‚úÖ T·∫•t c·∫£ roles ƒë√£ t·ªìn t·∫°i.");
		}
	} catch (error) {
		console.error("‚ùå L·ªói khi kh·ªüi t·∫°o Roles:", error);
	}
};

// üîπ Kh·ªüi t·∫°o t√†i kho·∫£n Admin
const initializeAdmin = async () => {
	try {
		// Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
		const adminExists = await User.findOne({ email: process.env.ADMIN_EMAIL });
		if (adminExists) {
			console.log("‚úÖ T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i.");
			return;
		}

		// T·∫°o admin user
		const hashedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD, 10);
		const adminUser = await User.create({
			fullName: "System Admin",
			email: process.env.ADMIN_EMAIL,
			phone: process.env.ADMIN_PHONE,
			password: hashedPassword,
			isVerified: true,
			isBlocked: false,
		});

		// G√°n role ADMIN
		const adminRole = await Role.findOne({ roleName: ROLE.ADMIN });
		if (adminRole) {
			await UserRole.create({
				userId: adminUser._id,
				roleId: adminRole._id,
			});
			console.log("‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin v√† g√°n quy·ªÅn th√†nh c√¥ng.");
		}
	} catch (error) {
		console.error("‚ùå L·ªói khi kh·ªüi t·∫°o Admin:", error);
	}
};

module.exports = { connectDB };
